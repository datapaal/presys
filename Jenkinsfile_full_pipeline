node {
    def project = "navikt"
    def repoName = "presys"
    def application = "presys"

    /* metadata */
    def commitHash, commitHashShort, commitUrl, committer, pom, currentVersion, releaseVersion

    def mvnHome = tool "maven-3.3.9"
    def mvn = "${mvnHome}/bin/mvn"
    def nodeHome = tool "nodejs-6.6.0"
    def node = "${nodeHome}/node"
    def npm = "${nodeHome}/npm"

    try {
        // delete whole workspace before starting the build,
        // so that the 'git clone' command below doesn't fail due to
        // directory not being empty
        cleanWs()

        stage("checkout") {
            // we are cloning the repository manually, because the standard 'git' and 'checkout' steps
            // infer with the Git polling that Jenkins already does (when polling for changes to the
            // repo containing the Jenkinsfile).
            withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
                sh(script: "git clone https://github.com/${project}/${repoName}.git .")
            }

            commitHash = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
            commitHashShort = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            commitUrl = "https://github.com/${project}/${repoName}/commit/${commitHash}"

            /* gets the person who committed last as "Surname, First name" */
            committer = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()

            githubNotify([
                    status: 'pending',
                    description: "Build #${env.BUILD_NUMBER} has started",
                    context: 'continuous-integration/jenkins',
                    targetUrl: env.BUILD_URL
            ])
        }

        stage("initialize") {
            pom = readMavenPom file: 'pom.xml'
            currentVersion = pom.version
            releaseVersion = pom.version.tokenize("-")[0]
            nextVersion = (releaseVersion.toInteger() + 1) + "-SNAPSHOT"
        }

        stage("build") {
            withEnv(['APPDATA=klient/node/node_modules/npm/bin', 'HTTP_PROXY=http://webproxy-utvikler.nav.no:8088', 'NO_PROXY=adeo.no']) {
                sh "${mvn} clean install -Djava.io.tmpdir=/tmp/${application} -B -e"
            }
        }

        stage("sonar analysis") {
            def scannerHome = tool 'sonarqube-scanner';

            // withSonarQubeEnv injects SONAR_HOST_URL and SONAR_AUTH_TOKEN (amongst others),
            // so we don't have to set them as cli args to sonar-scanner
            withSonarQubeEnv('Presys Sonar') {
                sh "${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=no.nav.pensjon.presys:presys \
                    -Dsonar.projectName=Presys \
                    -Dsonar.projectVersion=${pom.version} \
                    -Dsonar.sources=src \
                    -Dsonar.sourceEncoding=UTF-8 \
                    -Dsonar.java.binaries=target/classes \
                    -Dsonar.java.test.binaries=target/test-classes \
                    -Dsonar.modules=appconfig,klient,metrics,server \
                    -Dsonar.links.scm=https://github.com/${project}/${repoName}.git \
                    -Dsonar.links.scm_dev=https://github.com/${project}/${repoName}.git"
            }
        }

        stage("release") {
            sh "${mvn} versions:set -B -DnewVersion=${releaseVersion} -DgenerateBackupPoms=false"
            sh "git add '*pom.xml'"
            sh "git commit -m 'Commit before creating tag ${application}-${releaseVersion}'"
            sh "git tag -a '${application}-${releaseVersion}' -m '${application}-${releaseVersion}'"

            withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
                withCredentials([string(credentialsId: 'navikt-jenkins-oauthtoken', variable: 'GITHUB_OAUTH_TOKEN')]) {
                    sh("git push --tags https://navikt-jenkins:${GITHUB_OAUTH_TOKEN}@github.com/navikt/presys.git master")
                }
            }

            withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
                sh "${mvn} clean deploy -DskipTests -pl '!klient' -B -e"
            }

            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jiraServiceUser', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh "/usr/bin/jilease -jiraUrl https://jira.adeo.no -project PRE -application ${application} -version ${releaseVersion} -username ${env.USERNAME} -password ${env.PASSWORD}"
            }

            sh "${mvn} versions:set -B -DnewVersion=${nextVersion} -DgenerateBackupPoms=false"
            sh "git add '*pom.xml'"
            sh "git commit -m 'Updated version to ${nextVersion} after release'"

            withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
                withCredentials([string(credentialsId: 'navikt-jenkins-oauthtoken', variable: 'GITHUB_OAUTH_TOKEN')]) {
                    sh("git push https://navikt-jenkins:${GITHUB_OAUTH_TOKEN}@github.com/navikt/presys.git master")
                }
            }
        }

        stage("integration tests") {
            build([
                job: 'presys-deploy-pipeline',
                parameters: [
                    string(name: 'RELEASE_VERSION', value: releaseVersion),
                    string(name: 'COMMIT_HASH', value: commitHash),
                    string(name: 'DEPLOY_ENV', value: 't0')
                ]
            ])

            dir ("qa") {
                withEnv(["PATH+NODE=${nodeHome}", 'HTTP_PROXY=http://webproxy-utvikler.nav.no:8088', 'NO_PROXY=adeo.no']) {
                    // install manually using local distribution, as the chromedriver package will
                    // try to download from Internet if else
                    sh "${npm} install chromedriver --chromedriver_filepath=/usr/local/chromedriver/chromedriver_linux64.zip"
                    sh "${npm} install"

                    sh "./node_modules/.bin/nightwatch --env jenkins"
                }
            }
        }

        stage("deploy") {
            build([
                job: 'presys-deploy-pipeline',
                parameters: [
                    string(name: 'RELEASE_VERSION', value: releaseVersion),
                    string(name: 'COMMIT_HASH', value: commitHash),
                    string(name: 'DEPLOY_ENV', value: 'q1')
                ]
            ])

            build([
                job: 'presys-deploy-pipeline',
                parameters: [
                    string(name: 'RELEASE_VERSION', value: releaseVersion),
                    string(name: 'COMMIT_HASH', value: commitHash),
                    string(name: 'DEPLOY_ENV', value: 'q0')
                ]
            ])

            build([
                job: 'presys-deploy-pipeline',
                parameters: [
                    string(name: 'RELEASE_VERSION', value: releaseVersion),
                    string(name: 'COMMIT_HASH', value: commitHash),
                    string(name: 'DEPLOY_ENV', value: 'p')
                ]
            ])
        }

        currentBuild.result = 'SUCCESS'
        githubNotify([
                status: 'success',
                description: "Build #${env.BUILD_NUMBER} has finished",
                context: 'continuous-integration/jenkins',
                targetUrl: env.BUILD_URL
        ])
        slackSend([
            color: 'good',
            message: "Build <${env.BUILD_URL}|#${env.BUILD_NUMBER}> (<${commitUrl}|${commitHashShort}>) of ${project}/${repoName}@master by ${committer} passed"
        ])
    } catch (e) {
        githubNotify([
                status: 'failure',
                description: "Build #${env.BUILD_NUMBER} has failed",
                context: 'continuous-integration/jenkins',
                targetUrl: env.BUILD_URL
        ])
        slackSend([
            color: 'danger',
            message: "Build <${env.BUILD_URL}|#${env.BUILD_NUMBER}> (<${commitUrl}|${commitHashShort}>) of ${project}/${repoName}@master by ${committer} failed"
        ])

        throw e
    }
}