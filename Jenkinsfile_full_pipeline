node {
    def project = "navikt"
    def repoName = "presys"
    def application = "presys"

    /* environment mappings */
    def environmentUrlMap = [
            "cd-u1": "https://e34jbsl01778.devillo.no:8443/presys",
            "t0": "https://app-t0.adeo.no/presys",
            "q0": "https://app-q0.adeo.no/presys",
            "q1": "https://app-q1.adeo.no/presys",
            "p": "https://app.adeo.no/presys"
    ]

    /* metadata */
    def commitHash, commitHashShort, commitUrl, committer, pom, currentVersion, releaseVersion

    def mvnHome = tool "maven-3.3.9"
    def mvn = "${mvnHome}/bin/mvn"
    def nodeHome = tool "nodejs-6.6.0"
    def node = "${nodeHome}/node"
    def npm = "${nodeHome}/npm"

    try {
        // delete whole workspace before starting the build,
        // so that the 'git clone' command below doesn't fail due to
        // directory not being empty
        cleanWs()

        stage("checkout") {
            // we are cloning the repository manually, because the standard 'git' and 'checkout' steps
            // infer with the Git polling that Jenkins already does (when polling for changes to the
            // repo containing the Jenkinsfile).
            withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
            			sh(script: "git clone https://github.com/${project}/${repoName}.git .")
            }

            commitHash = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
            commitHashShort = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            commitUrl = "https://github.com/${project}/${repoName}/commit/${commitHash}"

            /* gets the person who committed last as "Surname, First name" */
            committer = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()

            notifyGithub("${project}", "${repoName}", "${commitHash}", 'pending', "Build #${env.BUILD_NUMBER} has started")
        }

        stage("initialize") {
            pom = readMavenPom file: 'pom.xml'
            currentVersion = pom.version
            releaseVersion = pom.version.tokenize("-")[0]
            nextVersion = (releaseVersion.toInteger() + 1) + "-SNAPSHOT"
        }

        stage("build") {
            withEnv(['APPDATA=klient/node/node_modules/npm/bin', 'HTTP_PROXY=http://webproxy-utvikler.nav.no:8088', 'NO_PROXY=adeo.no']) {
                sh "${mvn} clean install -Djava.io.tmpdir=/tmp/${application} -B -e"
            }
        }

        stage("release") {
            sh "${mvn} versions:set -B -DnewVersion=${releaseVersion} -DgenerateBackupPoms=false"
            sh "git add '*pom.xml'"
            sh "git commit -m 'Commit before creating tag ${application}-${releaseVersion}'"
            sh "git tag -a '${application}-${releaseVersion}' -m '${application}-${releaseVersion}'"

            withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'navikt-jenkins-github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
                    sh("git push --tags https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/navikt/presys.git master")
                }
            }

            withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
                sh "${mvn} clean deploy -DskipTests -pl '!klient' -B -e"
            }

            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jiraServiceUser', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh "/usr/bin/jilease -jiraUrl https://jira.adeo.no -project PRE -application ${application} -version ${releaseVersion} -username ${env.USERNAME} -password ${env.PASSWORD}"
            }
        }

        stage("new dev version") {
            sh "${mvn} versions:set -B -DnewVersion=${nextVersion} -DgenerateBackupPoms=false"
            sh "git add '*pom.xml'"
            sh "git commit -m 'Updated version to ${nextVersion} after release'"
            withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'navikt-jenkins-github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
                    sh("git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/navikt/presys.git master")
                }
            }
        }

        stage("deploy til cd-u1") {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'fasitUser', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh "${mvn} aura:deploy -Dapps=${application}:${releaseVersion} -Denv=cd-u1 -Dusername=${USERNAME} -Dpassword=${PASSWORD}"
            }
        }

        stage("deploy til t0") {
            callback = "${env.BUILD_URL}input/Deploy/"

            def deploy = deployApp(application, releaseVersion, "t0", callback, committer)

            println("Issue: https://jira.adeo.no/browse/" + deploy.key);

            timeout(time: 15, unit: 'MINUTES') {
                input id: 'deploy', message: "deployer ${deploy.key}, deploy OK?"
            }

            hipchatSend(
                    color: 'GREEN',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER}: " +
                            "Deployet ${application}:${releaseVersion} til t0: ${environmentUrlMap['t0']}",
                    textFormat: true,
                    v2enabled: true
            )
        }

        stage("integration tests") {
            dir ("qa") {
                withEnv(["PATH+NODE=${nodeHome}", 'HTTP_PROXY=http://webproxy-utvikler.nav.no:8088', 'NO_PROXY=adeo.no']) {
                    // install manually using local distribution, as the chromedriver package will
                    // try to download from Internet if else
                    sh "${npm} install chromedriver --chromedriver_filepath=/usr/local/chromedriver/chromedriver_linux64.zip"
                    sh "${npm} install"

                    sh "./node_modules/.bin/nightwatch --env jenkins"
                }
            }
        }

        stage("deploy til q1") {
            callback = "${env.BUILD_URL}input/Deploy/"

            def deploy = deployApp(application, releaseVersion, "q1", callback, committer)

            println("Issue: https://jira.adeo.no/browse/" + deploy.key);

            timeout(time: 15, unit: 'MINUTES') {
                input id: 'deploy', message: "deployer ${deploy.key}, deploy OK?"
            }

            hipchatSend(
                    color: 'GREEN',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER}: " +
                        "Deployet ${application}:${releaseVersion} til q1: ${environmentUrlMap['q1']}",
                    textFormat: true,
                    v2enabled: true
            )
        }

        stage("deploy til q0") {
            callback = "${env.BUILD_URL}input/Deploy/"

            def deploy = deployApp(application, releaseVersion, "q0", callback, committer)

            println("Issue: https://jira.adeo.no/browse/" + deploy.key);

            timeout(time: 15, unit: 'MINUTES') {
                input id: 'deploy', message: "deployer ${deploy.key}, deploy OK?"
            }

            hipchatSend(
                    color: 'GREEN',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER}: " +
                            "Deployet ${application}:${releaseVersion} til q0: ${environmentUrlMap['q1']}",
                    textFormat: true,
                    v2enabled: true
            )
        }

        currentBuild.result = 'SUCCESS'
        notifyGithub("${project}", "${repoName}", "${commitHash}", 'success', "Build #${env.BUILD_NUMBER} has finished")
        slackSend([
            color: 'good',
            message: "Build <${env.BUILD_URL}|#${env.BUILD_NUMBER}> (<${commitUrl}|${commitHashShort}>) of ${project}/${repoName}@master by ${committer} passed"
        ])
    } catch (e) {
        notifyGithub("${project}", "${repoName}", "${commitHash}", 'failure', "Build #${env.BUILD_NUMBER} has failed")

        slackSend([
            color: 'danger',
            message: "Build <${env.BUILD_URL}|#${env.BUILD_NUMBER}> (<${commitUrl}|${commitHashShort}>) of ${project}/${repoName}@master by ${committer} failed"
        ])

        hipchatSend (
                color: 'RED',
                message: "${env.JOB_NAME} #${env.BUILD_NUMBER} failed:(\n" +
                        "Feilmelding: "  + e.getMessage() + "\n\n" +
                        "Bygg URL: ${env.BUILD_URL}\n" +
                        "Committer: ${committer}\n" +
                        "Commit URL: ${commitUrl}" ,
                textFormat: true,
                notify: true,
                v2enabled: true
        )
        throw e
    }
}

def deployApp(app, version, environment, callback, reporter) {
    def environmentId = [
            "t0": "16556",
            "q0": "16824",
            "q1": "16825",
            "p": "17658"
    ]

    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jiraServiceUser', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        def postBody = [
                fields: [
                        project          : [key: 'DEPLOY'],
                        issuetype        : [id: '10902'],
                        customfield_14811: [id: environmentId[environment], value: environmentId[environment]],
                        customfield_14812: "${app}:${version}",
                        customfield_17410: callback,
                        summary          : "Automatisk deploy p√• vegne av ${reporter}"
                ]
        ]

        def postBodyString = groovy.json.JsonOutput.toJson(postBody)
        def base64encoded = "${env.USERNAME}:${env.PASSWORD}".bytes.encodeBase64().toString()

        def response = httpRequest (
                url: 'https://jira.adeo.no/rest/api/2/issue/',
                customHeaders: [[name: "Authorization", value: "Basic ${base64encoded}"]],
                consoleLogResponseBody: true,
                contentType: 'APPLICATION_JSON',
                httpMode: 'POST',
                requestBody: postBodyString
        )
        def slurper = new groovy.json.JsonSlurperClassic()
        return slurper.parseText(response.content);
    }
}

def notifyGithub(owner, repo, sha, state, description) {
    def postBody = [
        state: "${state}",
        context: 'ci/jenkins',
        description: "${description}",
        target_url: "${env.BUILD_URL}"
    ]
    def postBodyString = groovy.json.JsonOutput.toJson(postBody)

    withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
        withCredentials([string(credentialsId: 'navikt-jenkins-oauthtoken', variable: 'ACCESS_TOKEN')]) {
            sh "curl 'https://api.github.com/repos/${owner}/${repo}/statuses/${sha}?access_token=$ACCESS_TOKEN' \
                -H 'Content-Type: application/json' \
                -X POST \
                -d '${postBodyString}'"
        }
    }
}
