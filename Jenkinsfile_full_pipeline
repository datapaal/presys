node {
    def project = "teampesys"
    def repoName = "dsf-web"
    def application = "presys"

    /* environment mappings */
    def environmentUrlMap = [
            "cd-u1": "https://e34jbsl01778.devillo.no:8443/presys",
            "t0": "https://app-t0.adeo.no/presys",
            "q1": "https://app-q1.adeo.no/presys"
    ]

    /* metadata */
    def commitHash, commitUrl, committer, committerEmail, pom, currentVersion, releaseVersion

    def mvnHome = tool "maven-3.3.9"
    def mvn = "${mvnHome}/bin/mvn"
    def nodeHome = tool "nodejs-6.6.0"
    def npm = "${nodeHome}/npm"

    try {
        stage("checkout") {
            git url: "ssh://git@stash.devillo.no:7999/${project}/${repoName}.git"
        }

        stage("initialize") {
            pom = readMavenPom file: 'pom.xml'
            currentVersion = pom.version
            releaseVersion = pom.version.tokenize("-")[0]
            nextVersion = (releaseVersion.toInteger() + 1) + "-SNAPSHOT"

            commitHash = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
            commitUrl = "http://stash.devillo.no/projects/${project}/repos/${repoName}/commits/${commitHash}"

            /* gets the person who committed last as "Surname, First name (email@domain.tld) */
            committer = sh(script: 'git log -1 --pretty=format:"%an (%ae)"', returnStdout: true).trim()
            /* ... same as above but only email */
            committerEmail = sh(script: 'git log -1 --pretty=format:"%ae"', returnStdout: true).trim()

            hipchatSend(
                    color: 'YELLOW',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER}: Begynner å bygge ${application}:${releaseVersion} ...\n" +
                            "Bygg URL: ${env.BUILD_URL}\n" +
                            "Committer: ${committer}\n" +
                            "Commit URL: ${commitUrl}",
                    textFormat: true,
                    v2enabled: true
            )
        }

        stage("build") {
            withEnv(['APPDATA=klient/node/node_modules/npm/bin', 'HTTP_PROXY=http://webproxy-utvikler.nav.no:8088', 'NO_PROXY=adeo.no']) {
                sh "${mvn} clean install -Djava.io.tmpdir=/tmp/${application} -B -e"
            }
        }

        stage("release") {
            sh "${mvn} versions:set -B -DnewVersion=${releaseVersion} -DgenerateBackupPoms=false"
            sh "git commit -am 'Commit before creating tag ${application}-${releaseVersion}, by ${committer}'"
            sh "git push origin master"
            sh "${mvn} clean deploy scm:tag -DskipTests -pl '!klient' -B -e"
        }

        stage("new dev version") {
            sh "${mvn} versions:set -B -DnewVersion=${nextVersion} -DgenerateBackupPoms=false"
            sh "git commit -am 'Updated version after release by ${committer}'"
            sh "git push origin master"
        }

        stage("deploy til cd-u1") {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'fasitUser', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh "${mvn} aura:deploy -Dapps=${application}:${releaseVersion} -Denv=cd-u1 -Dusername=${USERNAME} -Dpassword=${PASSWORD}"
            }
        }

        stage("deploy til t0") {
            callback = "${env.BUILD_URL}input/Deploy/"

            def deploy = deployApp(application, releaseVersion, "t0", callback, committer)

            println("Issue: https://jira.adeo.no/browse/" + deploy.key);

            timeout(time: 15, unit: 'MINUTES') {
                input id: 'deploy', message: "deployer ${deploy.key}, deploy OK?"
            }

            hipchatSend(
                    color: 'GREEN',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER}: Deployet ${application}:${releaseVersion} til t0: ${environmentUrlMap['t0']}",
                    textFormat: true,
                    v2enabled: true
            )
        }


        stage("deploy til q1") {
            callback = "${env.BUILD_URL}input/Deploy/"

            def deploy = deployApp(application, releaseVersion, "q1", callback, committer)

            println("Issue: https://jira.adeo.no/browse/" + deploy.key);

            timeout(time: 15, unit: 'MINUTES') {
                input id: 'deploy', message: "deployer ${deploy.key}, deploy OK?"
            }

            hipchatSend(
                    color: 'GREEN',
                    message: "${env.JOB_NAME} #${env.BUILD_NUMBER}: Deployet ${application}:${releaseVersion} til q1: ${environmentUrlMap['q1']}",
                    textFormat: true,
                    v2enabled: true
            )
        }
    } catch (e) {
        hipchatSend (
                color: 'RED',
                message: "${env.JOB_NAME} #${env.BUILD_NUMBER} failed:(\n" +
                        "Feilmelding: "  + e.getMessage() + "\n\n" +
                        "Bygg URL: ${env.BUILD_URL}\n" +
                        "Committer: ${committer}\n" +
                        "Commit URL: ${commitUrl}" ,
                textFormat: true,
                notify: true,
                v2enabled: true
        )
        throw e
    }
}

def deployApp(app, version, environment, callback, reporter) {
    def environmentId = [
            "t0": "16556",
            "q1": "16825"
    ]

    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'jiraServiceUser', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        def postBody = [
                fields: [
                        project          : [key: 'DEPLOY'],
                        issuetype        : [id: '10902'],
                        customfield_14811: [id: environmentId[environment], value: environmentId[environment]],
                        customfield_14812: "${app}:${version}",
                        customfield_17410: callback,
                        summary          : "Automatisk deploy på vegne av ${reporter}"
                ]
        ]

        def postBodyString = groovy.json.JsonOutput.toJson(postBody)
        def base64encoded = "${env.USERNAME}:${env.PASSWORD}".bytes.encodeBase64().toString()

        def response = httpRequest (
                url: 'https://jira.adeo.no/rest/api/2/issue/',
                customHeaders: [[name: "Authorization", value: "Basic ${base64encoded}"]],
                consoleLogResponseBody: true,
                contentType: 'APPLICATION_JSON',
                httpMode: 'POST',
                requestBody: postBodyString
        )
        def slurper = new groovy.json.JsonSlurperClassic()
        return slurper.parseText(response.content);
    }
}